{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": True
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingresa el nombre del archivo: \n",
      "archivo nuevo\n",
      "\n",
      "¿Desea introducir más archivos?(Y/N)\n",
      "n\n",
      "¿Cómo quieres que se llame el nuevo archivo? \n",
      "desencriptar\n",
      "\n",
      "¿Desea encriptar o desencriptar?\n",
      "desencriptar\n",
      "\n",
      "Ingrese el desfase deseado para las letras: \n",
      "20\n",
      "Ingrese el desfase deseado para los numeros: \n",
      "5\n",
      "\n",
      "Decrypting your message...\n",
      "\n",
      "Stand by, almost finished...\n",
      "\n",
      "Done!\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Se declara la clase\n",
    "class CésarCifrado():\n",
    "    #Inicia los atributos de la clase\n",
    "    def __init__(self, accion, offsetlet,offsetnum):\n",
    "        self.accion = accion\n",
    "        self.offsetlet = offsetlet\n",
    "        self.offsetnum = offsetnum\n",
    "    def action(self): #Esto es para encriptar o desencriptar aqui se decide\n",
    "        letrasM = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ'\n",
    "        letrasm = 'abcdefghijklmnñopqrstuvwxyz'\n",
    "        numeros = '0123456789'\n",
    "        long_num = len(numeros)\n",
    "        long = len(letrasM)\n",
    "        mensaje_nuevo = []\n",
    "        print(\"\\nDecrypting your message...\\n\")\n",
    "        sleep(2) # give an appearance of doing something complicated\n",
    "        print(\"Stand by, almost finished...\\n\")\n",
    "        sleep(2) # more of the same\n",
    "        print(\"Done!\\n\")\n",
    "        if accion == \"encriptar\":\n",
    "            \n",
    "            # POSICIÓN Y DESFACE:\n",
    "            for symbol in archivo_data:\n",
    "                \n",
    "                if symbol.lower() == \"á\" or symbol.lower() == \"í\" or symbol.lower() == \"ó\" or symbol.lower() == \"ú\" or symbol.lower() == \"é\":\n",
    "                    mensaje_nuevo.append(symbol)\n",
    "                \n",
    "                elif symbol.isupper(): #MAYUSCULAS\n",
    "                    desfase = letrasM.find(symbol.upper())\n",
    "                    if desfase + self.offsetlet < long: #si la suma es menor que la cantidad del abecedario esta bien\n",
    "                        mensaje_nuevo.append(letrasM[desfase + self.offsetlet])\n",
    "                    else: #Hacemos la suma menor a la cantidad del abecedario para que todo este bien\n",
    "                        mensaje_nuevo.append(letrasM[desfase + self.offsetlet - long])\n",
    "                elif symbol.islower(): #minusculas\n",
    "                    desfase = letrasm.find(symbol.lower())\n",
    "                    if desfase + self.offsetlet < long:\n",
    "                        mensaje_nuevo.append(letrasm[desfase + self.offsetlet])\n",
    "                    else:\n",
    "                        mensaje_nuevo.append(letrasm[desfase + self.offsetlet - long])\n",
    "                elif symbol.isdigit(): #numeros\n",
    "                    desfase = numeros.find(symbol)\n",
    "                    if desfase + self.offsetnum < long_num:\n",
    "                        mensaje_nuevo.append(numeros[desfase + self.offsetnum])\n",
    "                    else:\n",
    "                        mensaje_nuevo.append(numeros[desfase + self.offsetnum-long_num])\n",
    "                else:\n",
    "                    mensaje_nuevo.append(symbol)\n",
    "            return ''.join(mensaje_nuevo)\n",
    "        if accion == \"desencriptar\":\n",
    "            # POSICIÓN Y DESFACE A LA INVERSA:\n",
    "            for symbol in archivo_data:\n",
    "                if symbol.lower() == \"á\" or symbol.lower() == \"í\" or symbol.lower() == \"ó\" or symbol.lower() == \"ú\" or symbol.lower() == \"é\":\n",
    "                    mensaje_nuevo.append(symbol)\n",
    "                elif symbol.isupper(): #MAYUSCULAS\n",
    "                    desfase = letrasM.find(symbol.upper())\n",
    "                    if desfase - self.offsetlet < long: #si la suma es menor que la cantidad del abecedario esta bien\n",
    "                        mensaje_nuevo.append(letrasM[desfase - self.offsetlet])\n",
    "                    else: #Hacemos la suma menor a la cantidad del abecedario para que todo este bien\n",
    "                        mensaje_nuevo.append(letrasM[desfase - self.offsetlet + long])\n",
    "                elif symbol.islower(): #minusculas\n",
    "                    desfase = letrasm.find(symbol.lower())\n",
    "                    if desfase - self.offsetlet < long:\n",
    "                        mensaje_nuevo.append(letrasm[desfase - self.offsetlet])\n",
    "                    else:\n",
    "                        mensaje_nuevo.append(letrasm[desfase - self.offsetlet + long])\n",
    "                elif symbol.isdigit(): #numeros\n",
    "                    desfase = numeros.find(symbol) \n",
    "                    if desfase - self.offsetnum < long_num:\n",
    "                        mensaje_nuevo.append(numeros[desfase - self.offsetnum])\n",
    "                    else:\n",
    "                        mensaje_nuevo.append(numeros[desfase - self.offsetnum + long_num])\n",
    "                else:\n",
    "                    mensaje_nuevo.append(symbol)\n",
    "            return ''.join(mensaje_nuevo)\n",
    "        \n",
    "#unir dos files txt\n",
    "\n",
    "\n",
    "import os\n",
    "from time import sleep\n",
    "dir_rel_archivo = os.getcwd()\n",
    "nombre_archivo = input(\"Ingresa el nombre del archivo: \\n\")\n",
    "print()\n",
    "#creamos archivo nuevo = primero\n",
    "with open(dir_rel_archivo + \"\\\\\" + nombre_archivo + \".txt\",encoding=\"utf-8\") as x:\n",
    "        archivo_data = x.read()\n",
    "\n",
    "with open (dir_rel_archivo + \"\\\\\" + \"nombre_archivo_creado\" + \".txt\", 'w',encoding=\"utf-8\") as x:\n",
    "        x.write(archivo_data)\n",
    "\n",
    "deseo = input(\"¿Desea introducir más archivos?(Y/N)\\n\")\n",
    "while deseo.lower() == \"y\" or deseo.lower() == \"yes\":\n",
    "    nombre_archivo2 = input(\"Ingresa el nombre del otro archivo: \\n\")\n",
    "    print()\n",
    "    archivo_data = data2 = \"\"    \n",
    "    # se lee el archivo 1\n",
    "    with open(dir_rel_archivo + \"\\\\\" + \"nombre_archivo_creado\" + \".txt\",encoding=\"utf-8\") as x:\n",
    "        data = x.read()\n",
    "    # se lee el archivo 2\n",
    "    with open(dir_rel_archivo + \"\\\\\" + nombre_archivo2 + \".txt\",encoding=\"utf-8\") as x:\n",
    "        data2 = x.read()\n",
    "    # se unen los archivos\n",
    "    # para unir las palabras del archivo 2 en la siguiente linea\n",
    "    data += \" \"\n",
    "    data += data2\n",
    "    # se escribe de ambos archivos en el nuevo archivo\n",
    "    with open (dir_rel_archivo + \"\\\\\" + \"nombre_archivo_creado\" + \".txt\", 'w',encoding=\"utf-8\") as x:\n",
    "        x.write(data)\n",
    "        \n",
    "    # se lee la data del nuevo archivo\n",
    "    with open (dir_rel_archivo + \"\\\\\" + \"nombre_archivo_creado\" + \".txt\", encoding = \"utf-8\") as x:\n",
    "        archivo_data = x.read()\n",
    "    deseo = input(\"¿Desea introducir más archivos?(Y/N)\\n\")\n",
    "    print()\n",
    "nombre_archivo_creado = input(\"¿Cómo quieres que se llame el nuevo archivo? \\n\")\n",
    "print()\n",
    "os.rename(dir_rel_archivo + \"\\\\\" + \"nombre_archivo_creado.txt\",dir_rel_archivo + \"\\\\\" + nombre_archivo_creado+\".txt\")\n",
    "\n",
    "accion = input(\"¿Desea encriptar o desencriptar?\\n\")\n",
    "print()\n",
    "\n",
    " # RESTRCCIONES PARA DESFASE Y ACCION\n",
    "    \n",
    "while not (accion.lower() == \"encriptar\" or accion.lower() == \"desencriptar\"):\n",
    "    print(\"Ingrese una acción válida (encriptar/desencriptar)\\n\")\n",
    "    print()\n",
    "    accion = input(\"¿Desea encriptar o desencriptar? \\n\")\n",
    "desfase_letra = int(input('Ingrese el desfase deseado para las letras: \\n'))\n",
    "while not (-28 < desfase_letra < 28):\n",
    "    print(\"Valor no válido (-27 y 27)\")\n",
    "    print()\n",
    "    desfase_letra = int(input('Ingrese el desfase deseado para las letras: \\n'))\n",
    "    print()\n",
    "\n",
    "desfase_numero = int(input('Ingrese el desfase deseado para los numeros: \\n'))\n",
    "while not (-11 < desfase_numero < 11):\n",
    "    print(\"Valor no válido (-10 y 10)\\n\")\n",
    "    print()\n",
    "    desfase_numero = int(input('Ingrese el desfase deseado para las letras: \\n'))\n",
    "    print()\n",
    "    \n",
    "#EJECUTAR EL CIFRADO\n",
    "#Se manda a llamar la clase\n",
    "texto_encriptado = CésarCifrado(accion,desfase_letra,desfase_numero)\n",
    "\n",
    "# Usar la funcion dentro de la clase\n",
    "resultado = texto_encriptado.action()\n",
    "resultado\n",
    "#Sobreescribir el texto cifrado/desencriptado\n",
    "with open (dir_rel_archivo + \"\\\\\" + nombre_archivo_creado + \".txt\", 'w', encoding=\"utf-8\") as x:\n",
    "    x.write(resultado)\n",
    "# EL PROGRAMA NO ACEPTA TILDES NI CARACTERES ESPECIALES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
